/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.9.2/userguide/building_java_projects.html
 */

plugins {
    // Apply the java-library plugin for API and implementation separation.
    `java-library`
    id("com.github.spotbugs") version "5.1.3"
    id("com.diffplug.spotless") version "6.22.0"
    id("pl.allegro.tech.build.axion-release") version "1.15.5"

}
group = "io.specmesh.blackbox.testharness"
version = "0.0.1"

repositories {
    mavenCentral()
    maven {
        url = uri("https://packages.confluent.io/maven/")
        group = "io.confluent"
    }

}


tasks.test {
    // Use junit platform for unit tests.
    useJUnitPlatform()
}


java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(11))
    }

    withSourcesJar()
    withJavadocJar()
}

extra.apply {
    set("kafkaVersion", "7.5.0-ce")
    set("openTracingVersion", "0.33.0")
    set("observabilityVersion", "1.1.8")
    set("guavaVersion", "32.1.2-jre")
    set("confluentVersion", "7.5.0")
    set("jacksonVersion", "2.15.2")
    set("protobufVersion", "3.24.3")
    set("medeiaValidatorVersion", "1.1.0")
    set("junitVersion", "5.10.0")
    set("mockitoVersion", "5.5.0")
    set("junitPioneerVersion", "2.1.0")
    set("spotBugsVersion", "4.7.3")
    set("hamcrestVersion", "1.3")
    set("log4jVersion", "2.20.0")           // https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-core
    set("classGraphVersion", "4.8.21")
    set("testcontainersVersion", "1.18.3")
    set("lombokVersion", "1.18.30")
}

val junitVersion: String by extra
val jacksonVersion: String by extra
val mockitoVersion: String by extra
val junitPioneerVersion: String by extra
val guavaVersion : String by extra
val hamcrestVersion : String by extra
val log4jVersion : String by extra

dependencies {

    testImplementation("org.junit.jupiter:junit-jupiter-api:5.6.2")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine")
    api("org.apache.commons:commons-math3:3.6.1")

    implementation("com.google.guava:guava:29.0-jre")
    testImplementation("org.hamcrest:hamcrest-all:1.3")
    testImplementation("org.junit.jupiter:junit-jupiter-api:$junitVersion")
    testImplementation("org.junit.jupiter:junit-jupiter-params:$junitVersion")
    testImplementation("org.junit-pioneer:junit-pioneer:$junitPioneerVersion")
    testImplementation("org.mockito:mockito-junit-jupiter:$mockitoVersion")
    testImplementation("org.hamcrest:hamcrest-all:$hamcrestVersion")
    testImplementation("com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:$jacksonVersion")
    testImplementation("com.google.guava:guava-testlib:$guavaVersion")
    testImplementation("org.apache.logging.log4j:log4j-core:$log4jVersion")
    testImplementation("org.apache.logging.log4j:log4j-slf4j2-impl:$log4jVersion")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:$junitVersion")
}

tasks.compileJava {
    options.compilerArgs.add("-Xlint:all,-serial,-processing")
    options.compilerArgs.add("-Werror")
}

tasks.test {
    useJUnitPlatform()
    setForkEvery(1)
    maxParallelForks = 2
    testLogging {
        showStandardStreams = true
        exceptionFormat = org.gradle.api.tasks.testing.logging.TestExceptionFormat.FULL
        showCauses = true
        showExceptions = true
        showStackTraces = true
    }
}

tasks.javadoc {
    if (JavaVersion.current().isJava9Compatible) {
        (options as StandardJavadocDocletOptions).apply {
            addBooleanOption("html5", true)
            // Why -quite? See: https://github.com/gradle/gradle/issues/2354
            addStringOption("Xwerror", "-quiet")
        }
    }
}

spotless {
    java {
        googleJavaFormat("1.15.0").aosp().reflowLongStrings()
        indentWithSpaces()
        importOrder()
        removeUnusedImports()
        trimTrailingWhitespace()
        endWithNewline()
        targetExclude("**/build/generated/source*/**/*.*")
    }
}

tasks.register("format") {
    dependsOn("spotlessCheck", "spotlessApply")
}

tasks.register("checkstyle") {
    dependsOn("checkstyleMain", "checkstyleTest")
}

tasks.register("spotbugs") {
    dependsOn("spotbugsMain", "spotbugsTest")
}

tasks.register("static") {
    dependsOn("checkstyle", "spotbugs")
}

spotbugs {
    excludeFilter.set(rootProject.file("config/spotbugs/suppressions.xml"))

    tasks.spotbugsMain {
        reports.create("html") {
            required.set(true)
            setStylesheet("fancy-hist.xsl")
        }
    }
    tasks.spotbugsTest {
        reports.create("html") {
            required.set(true)
            setStylesheet("fancy-hist.xsl")
        }
    }
}

tasks.jar {
    archiveBaseName.set("specmesh-${project.name}")
}
